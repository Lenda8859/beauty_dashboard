import pandas as pd
import streamlit as st
import plotly.express as px
from models.data_loader import DataLoader


class KPIView:
    def __init__(self, data_path):
        self.data_path = data_path
        self.loader = DataLoader(self.data_path)


    def get_filtered_data(self, df):

        df['–¥–∞—Ç–∞'] = pd.to_datetime(df['–¥–∞—Ç–∞'])

        min_date = df['–¥–∞—Ç–∞'].min().date()
        max_date = df['–¥–∞—Ç–∞'].max().date()

        start_date = st.sidebar.date_input("üìÖ –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞", min_date, key="start_date_filter_kpi")
        end_date = st.sidebar.date_input("üìÖ –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞", max_date, key="end_date_filter_kpi")

        filtered_df = df[
            (df['–¥–∞—Ç–∞'] >= pd.to_datetime(start_date)) &
            (df['–¥–∞—Ç–∞'] <= pd.to_datetime(end_date))
        ]

        return filtered_df, start_date, end_date

    def render(self, df):
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        st.markdown("""
                     <style>
                    .block-container {
                    padding: 1rem 1 rem;
                                }
                    .css-1d391kg {  /* nf,kbws */
                    font-size: 16px !important; }
                    .stButton button {
                    font-size: 18px !important:
                    padding: 10px 20px;
                        }
                    </style>
                """, unsafe_allow_html=True)

        st.title("üìä KPI ‚Äî –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")

        filtered_df, start_date, end_date = self.get_filtered_data(df)
        st.subheader(f"–î–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥: {start_date} ‚Äî {end_date}")
        st.markdown("<div style='overflow-x: auto'>", unsafe_allow_html=True)
        st.dataframe(filtered_df)
        st.markdown("<div>", unsafe_allow_html=True)

        # KPI: –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
        if '—Å—É–º–º–∞' in filtered_df.columns:
            avg_price = round(filtered_df['—Å—É–º–º–∞'].mean(), 2)
            st.metric("üí∞ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{avg_price} ‚ÇΩ")

        # KPI: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
        unique_clients = filtered_df['–∫–ª–∏–µ–Ω—Ç'].nunique()
        st.metric("üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", unique_clients)

        # KPI: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥
        total_services = filtered_df.shape[0]
        st.metric("üßæ –í—Å–µ–≥–æ —É—Å–ª—É–≥", total_services)

        # üìà –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
        st.subheader("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–∞—Ç–∞–º")
        activity = filtered_df.groupby('–¥–∞—Ç–∞').size().reset_index(name='–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        fig1 = px.line(activity, x='–¥–∞—Ç–∞', y='–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥ –ø–æ –¥–∞—Ç–∞–º',
                       color_discrete_sequence=['#4C5C68'])
        st.plotly_chart(fig1)

        # üåÄ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Å–ª—É–≥–∞–º
        st.subheader("üåÄ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Å–ª—É–≥–∞–º")
        service_counts = filtered_df['—É—Å–ª—É–≥–∞'].value_counts().reset_index()
        service_counts.columns = ['—É—Å–ª—É–≥–∞', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']
        fig2 = px.pie(service_counts, names='—É—Å–ª—É–≥–∞', values='–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                      color_discrete_sequence=['#4C5C68', '#EEC07C'])
        st.plotly_chart(fig2)

        # üìä –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
        st.subheader("üìä –ù–∞–≥—Ä—É–∑–∫–∞ –ø–æ –º–∞—Å—Ç–µ—Ä–∞–º")
        master_counts = filtered_df['–º–∞—Å—Ç–µ—Ä'].value_counts().reset_index()
        master_counts.columns = ['–º–∞—Å—Ç–µ—Ä', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']
        fig3 = px.bar(master_counts, x='–º–∞—Å—Ç–µ—Ä', y='–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                      color_discrete_sequence=['#4C5C68'])
        st.plotly_chart(fig3)
